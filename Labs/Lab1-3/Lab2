Q1: Create a class definition that represents or models something. Give it a constant, some properties, and a few methods. Set appropriate visibilities for each.
A1: I based my model on the game League of Legends, specifically the champion Blitzcrank. 

class Blitzcrank {
    // Constants for Blitzcrank's abilities
    const Q_ABILITY = 'Rocket Grab';
    const W_ABILITY = 'Overdrive';
    const E_ABILITY = 'Power Fist';
    const R_ABILITY = 'Static Field';

    // Properties
    private $summonerName;
    private $role;
    private $health;
    private $mana;

    // init function for Blitzcrank's stats
    public function __construct() {
        $this->summonerName = "Blitzcrank";
        $this->role = "Support";
        $this->health = 582;
        $this->mana = 267;
    }

    // Display Blitzcrank's information
    public function displayInfo() {
        echo "Champion: {$this->summonerName}\n";
        echo "Role: {$this->role}\n";
        echo "Health: {$this->health} HP\n";
        echo "Mana: {$this->mana} MP\n";
    }

    // Constant Q displayed
    public function useQAbility() {
        echo "{$this->summonerName} used " . self::Q_ABILITY . ". Hook!\n";
    }

    //Constant W displayed
    public function useWAbility() {
        echo "{$this->summonerName} used " . self::W_ABILITY . ". Gotta go fast!\n";
    }

    // Constant E displayed
    public function useEAbility() {
        echo "{$this->summonersummonerName} used " . self::E_ABILITY . ". Bonk!\n";
    }

    // Constant R (ultimate) displayed
    public function useRAbility() {
        echo "{$this->summonerName} used " . self::R_ABILITY . ". Ultimate!\n";
    }
}


Q2: Instantiate a couple of objects, and execute the methods created producing some output.
A2: 

Objects:
// Two objects
$blitzcrank1 = new Blitzcrank();
$blitzcrank2 = new Blitzcrank();

// Information applied for both objects
echo "Blitzcrank 1:\n";
$blitzcrank1->displayInfo();

echo "Blitzcrank 2:\n";
$blitzcrank2->displayInfo();

// Use Blitzcrank's abilities for both objects
echo "Blitzcrank 1 Abilities:\n";
$blitzcrank1->useQAbility();
$blitzcrank1->useWAbility();
$blitzcrank1->useEAbility();
$blitzcrank1->useRAbility();

echo "Blitzcrank 2 Abilities:\n";
$blitzcrank2->useQAbility();
$blitzcrank2->useWAbility();
$blitzcrank2->useEAbility();
$blitzcrank2->useRAbility();

Output:
Blitzcrank 1:
Champion: Blitzcrank
Role: Support
Health: 582 HP
Mana: 267 MP
Blitzcrank 2:
Champion: Blitzcrank
Role: Support
Health: 582 HP
Mana: 267 MP
Blitzcrank 1 Abilities:
Blitzcrank used Rocket Grab. Hook!
Blitzcrank used Overdrive. Gotta go fast!
Blitzcrank used Power Fist. Bonk!
Blitzcrank used Static Field. Ultimate!
Blitzcrank 2 Abilities:
Blitzcrank used Rocket Grab. Hook!
Blitzcrank used Overdrive. Gotta go fast!
Blitzcrank used Power Fist. Bonk!
Blitzcrank used Static Field. Ultimate!

Q3: Create something which is realistic and appropriate to a current or future application for your domain.
A3: 

class automobile {
  
    public $make; 
    protected $year; 
    protected $color;
    private $model; 

}
